name: 'Claude Code Security Reviewer'
description: 'AI-powered security review GitHub Action using Claude to analyze code changes for security vulnerabilities'
author: 'Anthropic'

inputs:
  comment-pr:
    description: 'Whether to comment on PRs with findings'
    required: false
    default: 'true'
  
  upload-results:
    description: 'Whether to upload results as artifacts'
    required: false
    default: 'true'
  
  exclude-directories:
    description: 'Comma-separated list of directories to exclude from scanning'
    required: false
    default: ''

  claudecode-timeout:
    description: 'Timeout for ClaudeCode analysis in minutes'
    required: false
    default: '20'
  
  # Provider Configuration
  llm-provider:
    description: 'LLM provider to use (anthropic, vertex, bedrock). Defaults to anthropic for backward compatibility.'
    required: false
    default: 'anthropic'
  
  # Anthropic Configuration (backward compatibility)
  claude-api-key:
    description: 'Anthropic Claude API key for security analysis (required when using anthropic provider)'
    required: false
    default: ''

  claude-model:
    description: 'Claude model to use for security analysis (e.g., claude-3-sonnet-20240229)'
    required: false
    default: ''

  # Google Cloud Vertex AI Configuration
  google-cloud-project:
    description: 'Google Cloud project ID (required when using vertex provider)'
    required: false
    default: ''
  
  google-cloud-region:
    description: 'Google Cloud region for Vertex AI (default: us-central1)'
    required: false
    default: 'us-central1'
  
  google-cloud-service-account-key:
    description: 'Base64-encoded Google Cloud service account JSON key (optional, can use workload identity)'
    required: false
    default: ''

  # AWS Bedrock Configuration
  aws-region:
    description: 'AWS region for Bedrock (default: us-east-1)'
    required: false
    default: 'us-east-1'
  
  aws-access-key-id:
    description: 'AWS access key ID (optional, can use IAM roles)'
    required: false
    default: ''
  
  aws-secret-access-key:
    description: 'AWS secret access key (optional, can use IAM roles)'
    required: false
    default: ''

  run-every-commit:
    description: 'Run ClaudeCode on every commit (skips cache check). Warning: This may lead to more false positives on PRs with many commits as the AI analyzes the same code multiple times.'
    required: false
    default: 'false'

  false-positive-filtering-instructions:
    description: 'Path to custom false positive filtering instructions text file'
    required: false
    default: ''

  custom-security-scan-instructions:
    description: 'Path to custom security scan instructions text file to append to audit prompt'
    required: false
    default: ''

outputs:
  findings-count:
    description: 'Number of security findings'
    value: ${{ steps.claudecode-scan.outputs.findings_count }}
  
  results-file:
    description: 'Path to the results JSON file'
    value: ${{ steps.claudecode-scan.outputs.results_file }}

runs:
  using: 'composite'
  steps:
    - name: Install GitHub CLI
      shell: bash
      run: |
        echo "::group::Install gh CLI"
        # Install GitHub CLI for PR operations
        sudo apt-get update && sudo apt-get install -y gh
        echo "::endgroup::"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Check ClaudeCode run history
      id: claudecode-history
      if: github.event_name == 'pull_request'
      uses: actions/cache@v4
      with:
        path: .claudecode-marker
        key: claudecode-${{ github.repository_id }}-pr-${{ github.event.pull_request.number }}-${{ github.sha }}
        restore-keys: |
          claudecode-${{ github.repository_id }}-pr-${{ github.event.pull_request.number }}-
    
    - name: Determine ClaudeCode enablement
      id: claudecode-check
      shell: bash
      run: |
        # Check if ClaudeCode should be enabled
        ENABLE_CLAUDECODE="true"
        SILENCE_CLAUDECODE_COMMENTS="false"
        
        # For PRs, check sampling and cache
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          CACHE_HIT="${{ steps.claudecode-history.outputs.cache-hit }}"

          # Now check cache - if ClaudeCode has already run, disable unless run-every-commit is true
          # Check if marker file exists (cache may have been restored from a different SHA)
          if [ "${{ inputs.run-every-commit }}" != "true" ] && [ -f ".claudecode-marker/marker.json" ]; then
            echo "ClaudeCode has already run on PR #$PR_NUMBER (found marker file), forcing disable to avoid false positives"
            ENABLE_CLAUDECODE="false"
          elif [ "${{ inputs.run-every-commit }}" == "true" ] && [ -f ".claudecode-marker/marker.json" ]; then
            echo "ClaudeCode has already run on PR #$PR_NUMBER but run-every-commit is enabled, running again"
          elif [ "$ENABLE_CLAUDECODE" == "true" ]; then
            echo "ClaudeCode will run for PR #$PR_NUMBER (first run)"
          fi
        fi
        
        echo "enable_claudecode=$ENABLE_CLAUDECODE" >> $GITHUB_OUTPUT
        echo "silence_claudecode_comments=$SILENCE_CLAUDECODE_COMMENTS" >> $GITHUB_OUTPUT
        
        if [ "$ENABLE_CLAUDECODE" == "true" ]; then
          echo "ClaudeCode is enabled for this run"
        else
          echo "ClaudeCode is disabled for this run"
        fi
    
    - name: Reserve ClaudeCode slot to prevent race conditions
      if: steps.claudecode-check.outputs.enable_claudecode == 'true' && github.event_name == 'pull_request'
      shell: bash
      run: |
        # Create a reservation marker immediately to prevent other concurrent runs
        mkdir -p .claudecode-marker
        cat > .claudecode-marker/marker.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "repository_id": "${{ github.repository_id }}",
          "repository": "${{ github.repository }}",
          "pr_number": ${{ github.event.pull_request.number }},
          "sha": "${{ github.sha }}",
          "status": "reserved",
          "run_id": "${{ github.run_id }}",
          "run_number": "${{ github.run_number }}"
        }
        EOF
        echo "Created ClaudeCode reservation marker for PR #${{ github.event.pull_request.number }}"
    
    - name: Save ClaudeCode reservation to cache
      if: steps.claudecode-check.outputs.enable_claudecode == 'true' && github.event_name == 'pull_request'
      uses: actions/cache/save@v4
      with:
        path: .claudecode-marker
        key: claudecode-${{ github.repository_id }}-pr-${{ github.event.pull_request.number }}-${{ github.sha }}
    
    - name: Set up Node.js
      if: steps.claudecode-check.outputs.enable_claudecode == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Configure authentication and install dependencies
      shell: bash
      run: |
        echo "::group::Configure Authentication"
        
        # Validate provider
        PROVIDER="${{ inputs.llm-provider }}"
        if [[ ! "$PROVIDER" =~ ^(anthropic|vertex|bedrock)$ ]]; then
          echo "::error::Invalid llm-provider '$PROVIDER'. Must be one of: anthropic, vertex, bedrock"
          exit 1
        fi
        
        echo "Using LLM provider: $PROVIDER"
        
        # Configure GCP authentication if using Vertex AI
        if [ "$PROVIDER" == "vertex" ]; then
          if [ -z "${{ inputs.google-cloud-project }}" ]; then
            echo "::error::google-cloud-project is required when using vertex provider"
            exit 1
          fi
          
          echo "Configuring Google Cloud authentication..."
          
          # Set up service account if provided
          if [ -n "${{ inputs.google-cloud-service-account-key }}" ]; then
            echo "Setting up service account from provided key..."
            echo "${{ inputs.google-cloud-service-account-key }}" | base64 -d > /tmp/gcp-key.json
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp-key.json"
            echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
          else
            echo "Using default credentials (workload identity or gcloud auth)"
          fi
          
          echo "GOOGLE_CLOUD_PROJECT=${{ inputs.google-cloud-project }}" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_REGION=${{ inputs.google-cloud-region }}" >> $GITHUB_ENV
        fi
        
        # Configure AWS authentication if using Bedrock
        if [ "$PROVIDER" == "bedrock" ]; then
          echo "Configuring AWS authentication..."
          
          if [ -n "${{ inputs.aws-access-key-id }}" ] && [ -n "${{ inputs.aws-secret-access-key }}" ]; then
            echo "Setting up AWS credentials from inputs..."
            echo "AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}" >> $GITHUB_ENV
          else
            echo "Using default AWS credentials (IAM roles or environment)"
          fi
          
          echo "AWS_REGION=${{ inputs.aws-region }}" >> $GITHUB_ENV
        fi
        
        # Configure Anthropic authentication
        if [ "$PROVIDER" == "anthropic" ]; then
          if [ -z "${{ inputs.claude-api-key }}" ]; then
            echo "::error::claude-api-key is required when using anthropic provider"
            exit 1
          fi
          echo "ANTHROPIC_API_KEY=${{ inputs.claude-api-key }}" >> $GITHUB_ENV
        fi
        
        # Set provider environment variable
        echo "LLM_PROVIDER=$PROVIDER" >> $GITHUB_ENV
        
        echo "::endgroup::"
        
        echo "::group::Install Dependencies"
        if [ "${{ steps.claudecode-check.outputs.enable_claudecode }}" == "true" ]; then
          # Install provider-specific packages
          echo "Installing Python dependencies for provider: $PROVIDER"
          pip install -r ${{ github.action_path }}/claudecode/requirements.txt
          
          # Install Claude CLI
          npm install -g @anthropic-ai/claude-code
        fi
        sudo apt-get update && sudo apt-get install -y jq
        echo "::endgroup::"
    
    - name: Run ClaudeCode scan
      id: claudecode-scan
      if: steps.claudecode-check.outputs.enable_claudecode == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        ENABLE_CLAUDE_FILTERING: 'true' 
        EXCLUDE_DIRECTORIES: ${{ inputs.exclude-directories }}
        FALSE_POSITIVE_FILTERING_INSTRUCTIONS: ${{ inputs.false-positive-filtering-instructions }}
        CUSTOM_SECURITY_SCAN_INSTRUCTIONS: ${{ inputs.custom-security-scan-instructions }}
        CLAUDE_MODEL: ${{ inputs.claude-model }}
        # Multi-provider configuration (set by authentication step)
        LLM_PROVIDER: ${{ env.LLM_PROVIDER }}
        # Anthropic
        ANTHROPIC_API_KEY: ${{ env.ANTHROPIC_API_KEY }}
        # Google Cloud Vertex AI
        GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        GOOGLE_CLOUD_REGION: ${{ env.GOOGLE_CLOUD_REGION }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        # AWS Bedrock
        AWS_REGION: ${{ env.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "Running ClaudeCode AI security analysis..."
        echo "----------------------------------------"
        
        # Initialize outputs
        echo "findings_count=0" >> $GITHUB_OUTPUT
        echo "results_file=claudecode/claudecode-results.json" >> $GITHUB_OUTPUT
        
        # Skip ClaudeCode if not a PR
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "ClaudeCode only runs on pull requests, skipping"
          exit 0
        fi
                
        # Set timeout
        export CLAUDE_TIMEOUT="${{ inputs.claudecode-timeout }}"
        
        # Run ClaudeCode audit with verbose debugging
        export REPO_PATH=$(pwd)
        cd ${{ github.action_path }}
        
        # Enable verbose debugging
        echo "::group::ClaudeCode Environment"
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Claude CLI version: $(claude --version 2>&1 || echo 'Claude CLI not found')"
        echo "ANTHROPIC_API_KEY set: $(if [ -n "$ANTHROPIC_API_KEY" ]; then echo 'Yes'; else echo 'No'; fi)"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "PR_NUMBER: $PR_NUMBER"
        echo "Python path: $PYTHONPATH"
        echo "Files in claudecode directory:"
        ls -la claudecode/
        echo "::endgroup::"
        
        echo "::group::ClaudeCode Execution"
        # Add current directory to Python path so it can find the claudecode module
        export PYTHONPATH="${PYTHONPATH:+$PYTHONPATH:}$(pwd)"
        echo "Updated PYTHONPATH: $PYTHONPATH"
        
        # Run from the action root directory so Python can find the claudecode module
        python -u claudecode/github_action_audit.py > claudecode/claudecode-results.json 2>claudecode/claudecode-error.log || CLAUDECODE_EXIT_CODE=$?
        
        if [ -n "$CLAUDECODE_EXIT_CODE" ]; then
          echo "::warning::ClaudeCode exited with code $CLAUDECODE_EXIT_CODE"
        else
          echo "ClaudeCode scan completed successfully"
        fi
        
        # Parse ClaudeCode results and count findings regardless of exit code
        if [ -f claudecode/claudecode-results.json ]; then
          FILE_SIZE=$(wc -c < claudecode/claudecode-results.json)
          echo "ClaudeCode results file size: $FILE_SIZE bytes"
          
          # Check if file is empty or too small
          if [ "$FILE_SIZE" -lt 2 ]; then
            echo "::warning::ClaudeCode results file is empty or invalid (size: $FILE_SIZE bytes)"
            echo "::warning::ClaudeCode may have failed silently. Check claudecode-error.log"
            if [ -f claudecode/claudecode-error.log ]; then
              echo "Error log contents:"
              cat claudecode/claudecode-error.log
            fi
            echo "findings_count=0" >> $GITHUB_OUTPUT
          else
            echo "ClaudeCode results preview:"
            head -n 300 claudecode/claudecode-results.json || echo "Unable to preview results"
                        
            # Check if the result is an error
            if jq -e '.error' claudecode/claudecode-results.json > /dev/null 2>&1; then
              ERROR_MSG=$(jq -r '.error' claudecode/claudecode-results.json)
              echo "::warning::ClaudeCode error: $ERROR_MSG"
              echo "findings_count=0" >> $GITHUB_OUTPUT
            else
              # Use -r to get raw output and handle potential null/missing findings array
              CLAUDECODE_FINDINGS_COUNT=$(jq -r '.findings | if . == null then 0 else length end' claudecode/claudecode-results.json 2>/dev/null || echo "0")
              echo "::debug::Extracted ClaudeCode findings count: $CLAUDECODE_FINDINGS_COUNT"
              echo "findings_count=$CLAUDECODE_FINDINGS_COUNT" >> $GITHUB_OUTPUT
              echo "ClaudeCode found $CLAUDECODE_FINDINGS_COUNT security issues"
              
              # Also create findings.json for PR comment script
              jq '.findings // []' claudecode/claudecode-results.json > findings.json || echo '[]' > findings.json
            fi
          fi
        else
          echo "::warning::ClaudeCode results file not found"
          if [ -f claudecode/claudecode-error.log ]; then
            echo "Error log contents:"
            cat claudecode/claudecode-error.log
          fi
          echo "findings_count=0" >> $GITHUB_OUTPUT
        fi
        
        # Always copy files to workspace root regardless of the outcome
        # This ensures artifact upload and PR commenting can find them
        if [ -f findings.json ]; then
          cp findings.json ${{ github.workspace }}/findings.json || true
        fi
        if [ -f claudecode/claudecode-results.json ]; then
          cp claudecode/claudecode-results.json ${{ github.workspace }}/claudecode-results.json || true
        fi
        if [ -f claudecode/claudecode-error.log ]; then
          cp claudecode/claudecode-error.log ${{ github.workspace }}/claudecode-error.log || true
        fi
        
        echo "::endgroup::"
    
    
    - name: Upload scan results
      if: always() && inputs.upload-results == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: security-review-results
        path: |
          findings.json
          claudecode-results.json
          claudecode-error.log
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Comment PR with findings
      if: github.event_name == 'pull_request' && inputs.comment-pr == 'true' && steps.claudecode-check.outputs.enable_claudecode == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        CLAUDECODE_FINDINGS: ${{ steps.claudecode-scan.outputs.findings_count }}
        SILENCE_CLAUDECODE_COMMENTS: ${{ steps.claudecode-check.outputs.silence_claudecode_comments }}
      run: |
        node ${{ github.action_path }}/scripts/comment-pr-findings.js

branding:
  icon: 'shield'
  color: 'red'
